//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF_DB_CHAT.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfToDb")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/WcfToDb")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime dataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int id_nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int id_name_getField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool read_Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime data {
            get {
                return this.dataField;
            }
            set {
                if ((this.dataField.Equals(value) != true)) {
                    this.dataField = value;
                    this.RaisePropertyChanged("data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id_name {
            get {
                return this.id_nameField;
            }
            set {
                if ((this.id_nameField.Equals(value) != true)) {
                    this.id_nameField = value;
                    this.RaisePropertyChanged("id_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id_name_get {
            get {
                return this.id_name_getField;
            }
            set {
                if ((this.id_name_getField.Equals(value) != true)) {
                    this.id_name_getField = value;
                    this.RaisePropertyChanged("id_name_get");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool read_ {
            get {
                return this.read_Field;
            }
            set {
                if ((this.read_Field.Equals(value) != true)) {
                    this.read_Field = value;
                    this.RaisePropertyChanged("read_");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contacts", Namespace="http://schemas.datacontract.org/2004/07/WcfToDb")]
    [System.SerializableAttribute()]
    public partial class Contacts : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int id_nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string loginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id_name {
            get {
                return this.id_nameField;
            }
            set {
                if ((this.id_nameField.Equals(value) != true)) {
                    this.id_nameField = value;
                    this.RaisePropertyChanged("id_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string login {
            get {
                return this.loginField;
            }
            set {
                if ((object.ReferenceEquals(this.loginField, value) != true)) {
                    this.loginField = value;
                    this.RaisePropertyChanged("login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        WCF_DB_CHAT.ServiceReference1.CompositeType GetDataUsingDataContract(WCF_DB_CHAT.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WCF_DB_CHAT.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(WCF_DB_CHAT.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendMsg", ReplyAction="http://tempuri.org/IService1/SendMsgResponse")]
        int SendMsg(WCF_DB_CHAT.ServiceReference1.Message p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendMsg", ReplyAction="http://tempuri.org/IService1/SendMsgResponse")]
        System.Threading.Tasks.Task<int> SendMsgAsync(WCF_DB_CHAT.ServiceReference1.Message p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllALLMessages", ReplyAction="http://tempuri.org/IService1/GetAllALLMessagesResponse")]
        WCF_DB_CHAT.ServiceReference1.Message[] GetAllALLMessages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllALLMessages", ReplyAction="http://tempuri.org/IService1/GetAllALLMessagesResponse")]
        System.Threading.Tasks.Task<WCF_DB_CHAT.ServiceReference1.Message[]> GetAllALLMessagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/registration", ReplyAction="http://tempuri.org/IService1/registrationResponse")]
        int registration(WCF_DB_CHAT.ServiceReference1.Contacts contacts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/registration", ReplyAction="http://tempuri.org/IService1/registrationResponse")]
        System.Threading.Tasks.Task<int> registrationAsync(WCF_DB_CHAT.ServiceReference1.Contacts contacts);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllContacts", ReplyAction="http://tempuri.org/IService1/GetAllContactsResponse")]
        WCF_DB_CHAT.ServiceReference1.Contacts[] GetAllContacts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllContacts", ReplyAction="http://tempuri.org/IService1/GetAllContactsResponse")]
        System.Threading.Tasks.Task<WCF_DB_CHAT.ServiceReference1.Contacts[]> GetAllContactsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUNread_Messages", ReplyAction="http://tempuri.org/IService1/GetUNread_MessagesResponse")]
        WCF_DB_CHAT.ServiceReference1.Message[] GetUNread_Messages(int ID, int ID_get, int COUNT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUNread_Messages", ReplyAction="http://tempuri.org/IService1/GetUNread_MessagesResponse")]
        System.Threading.Tasks.Task<WCF_DB_CHAT.ServiceReference1.Message[]> GetUNread_MessagesAsync(int ID, int ID_get, int COUNT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMessages", ReplyAction="http://tempuri.org/IService1/GetAllMessagesResponse")]
        WCF_DB_CHAT.ServiceReference1.Message[] GetAllMessages(int ID, int ID_get);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMessages", ReplyAction="http://tempuri.org/IService1/GetAllMessagesResponse")]
        System.Threading.Tasks.Task<WCF_DB_CHAT.ServiceReference1.Message[]> GetAllMessagesAsync(int ID, int ID_get);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/READ_CHECK", ReplyAction="http://tempuri.org/IService1/READ_CHECKResponse")]
        System.Collections.Generic.Dictionary<string, int> READ_CHECK(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/READ_CHECK", ReplyAction="http://tempuri.org/IService1/READ_CHECKResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> READ_CHECKAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDATE", ReplyAction="http://tempuri.org/IService1/GetDATEResponse")]
        int GetDATE(int ID, int ID_get, string date1, string date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDATE", ReplyAction="http://tempuri.org/IService1/GetDATEResponse")]
        System.Threading.Tasks.Task<int> GetDATEAsync(int ID, int ID_get, string date1, string date2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WCF_DB_CHAT.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WCF_DB_CHAT.ServiceReference1.IService1>, WCF_DB_CHAT.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public WCF_DB_CHAT.ServiceReference1.CompositeType GetDataUsingDataContract(WCF_DB_CHAT.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WCF_DB_CHAT.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(WCF_DB_CHAT.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public int SendMsg(WCF_DB_CHAT.ServiceReference1.Message p) {
            return base.Channel.SendMsg(p);
        }
        
        public System.Threading.Tasks.Task<int> SendMsgAsync(WCF_DB_CHAT.ServiceReference1.Message p) {
            return base.Channel.SendMsgAsync(p);
        }
        
        public WCF_DB_CHAT.ServiceReference1.Message[] GetAllALLMessages() {
            return base.Channel.GetAllALLMessages();
        }
        
        public System.Threading.Tasks.Task<WCF_DB_CHAT.ServiceReference1.Message[]> GetAllALLMessagesAsync() {
            return base.Channel.GetAllALLMessagesAsync();
        }
        
        public int registration(WCF_DB_CHAT.ServiceReference1.Contacts contacts) {
            return base.Channel.registration(contacts);
        }
        
        public System.Threading.Tasks.Task<int> registrationAsync(WCF_DB_CHAT.ServiceReference1.Contacts contacts) {
            return base.Channel.registrationAsync(contacts);
        }
        
        public WCF_DB_CHAT.ServiceReference1.Contacts[] GetAllContacts() {
            return base.Channel.GetAllContacts();
        }
        
        public System.Threading.Tasks.Task<WCF_DB_CHAT.ServiceReference1.Contacts[]> GetAllContactsAsync() {
            return base.Channel.GetAllContactsAsync();
        }
        
        public WCF_DB_CHAT.ServiceReference1.Message[] GetUNread_Messages(int ID, int ID_get, int COUNT) {
            return base.Channel.GetUNread_Messages(ID, ID_get, COUNT);
        }
        
        public System.Threading.Tasks.Task<WCF_DB_CHAT.ServiceReference1.Message[]> GetUNread_MessagesAsync(int ID, int ID_get, int COUNT) {
            return base.Channel.GetUNread_MessagesAsync(ID, ID_get, COUNT);
        }
        
        public WCF_DB_CHAT.ServiceReference1.Message[] GetAllMessages(int ID, int ID_get) {
            return base.Channel.GetAllMessages(ID, ID_get);
        }
        
        public System.Threading.Tasks.Task<WCF_DB_CHAT.ServiceReference1.Message[]> GetAllMessagesAsync(int ID, int ID_get) {
            return base.Channel.GetAllMessagesAsync(ID, ID_get);
        }
        
        public System.Collections.Generic.Dictionary<string, int> READ_CHECK(int ID) {
            return base.Channel.READ_CHECK(ID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> READ_CHECKAsync(int ID) {
            return base.Channel.READ_CHECKAsync(ID);
        }
        
        public int GetDATE(int ID, int ID_get, string date1, string date2) {
            return base.Channel.GetDATE(ID, ID_get, date1, date2);
        }
        
        public System.Threading.Tasks.Task<int> GetDATEAsync(int ID, int ID_get, string date1, string date2) {
            return base.Channel.GetDATEAsync(ID, ID_get, date1, date2);
        }
    }
}
